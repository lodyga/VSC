/*
Context name    True when
Editor contexts	
editorFocus	    An editor has focus, either the text or a widget.
editorTextFocus	The text in an editor has focus (cursor is blinking).
textInputFocus	Any editor has focus (regular editor, debug REPL, etc.).
inputFocus	    Any text input area has focus (editors or text boxes).
Developer: Toggle Keyboard Shortcuts Troubleshooting

The following keys are accepted:
f1-f19, a-z, 0-9
`, -, =, [, ], \, ;, ', ,, ., /
left, up, right, down, pageup, pagedown, end, home
tab, enter, escape, space, backspace, delete
pausebreak, capslock, insert
numpad0-numpad9, numpad_multiply, numpad_add, numpad_separator
numpad_subtract, numpad_decimal, numpad_divide

Accepted scan codes:
[F1]-[F19], [KeyA]-[KeyZ], [Digit0]-[Digit9]
[Backquote], [Minus], [Equal], [BracketLeft], [BracketRight], [Backslash], [Semicolon], [Quote], [Comma], [Period], [Slash]
[ArrowLeft], [ArrowUp], [ArrowRight], [ArrowDown], [PageUp], [PageDown], [End], [Home]
[Tab], [Enter], [Escape], [Space], [Backspace], [Delete]
[Pause], [CapsLock], [Insert]
[Numpad0]-[Numpad9], [NumpadMultiply], [NumpadAdd], [NumpadComma]
[NumpadSubtract], [NumpadDecimal], [NumpadDivide]

*/
[
  // kill terminal
  {
    "key": "ctrl+shift+[Digit4]",
    "command": "workbench.action.terminal.kill"
  },
  // bind delete to backspace
  {
    "key": "shift+[Backspace]",
    "command": "deleteRight",
    "when": "textInputFocus && !editorReadonly"
  },
  {
    "key": "ctrl+shift+[Backspace]",
    "command": "deleteWordRight",
    //"command": "deleteWordStartRight",
    //"command": "deleteWordEndRight",
    "when": "textInputFocus && !editorReadonly"
  },
  {
    "key": "alt+[Backspace]",
    "command": "editor.action.deleteLines",
    "when": "textInputFocus && !editorReadonly"
  },
  {
    "key": "shift+alt+[Backspace]",
    "command": "deleteInsideWord",
    "when": "textInputFocus && !editorReadonly"
  },
  {
    "key": "ctrl+alt+[Backspace]",
    "command": "deleteAllLeft",
    "when": "textInputFocus"
  },
  {
    "key": "ctrl+alt+shift+[Backspace]",
    "command": "deleteAllRight",
    "when": "textInputFocus"
  },
  // move cursor vertically by 10 lines, select vertically by 10 lines
  {
    "key": "ctrl+Down",
    "command": "lineJumper.moveDown",
    "when": "editorTextFocus"
  },
  {
    "key": "ctrl+Up",
    "command": "lineJumper.moveUp",
    "when": "editorTextFocus"
  },
  {
    "key": "ctrl+shift+Down",
    "command": "lineJumper.selectDown",
    "when": "editorTextFocus"
  },
  {
    "key": "ctrl+shift+Up",
    "command": "lineJumper.selectUp",
    "when": "editorTextFocus"
  },
  // move lines vertically
  {
    "key": "alt+[KeyI]",
    "command": "editor.action.moveLinesUpAction",
    "when": "editorTextFocus && !editorReadonly"
  },
  {
    "key": "alt+[KeyK]",
    "command": "editor.action.moveLinesDownAction",
    "when": "editorTextFocus && !editorReadonly"
  },
  // outdentLines indentLines
  {
    "key": "alt+[KeyJ]",
    "command": "editor.action.outdentLines",
    "when": "editorTextFocus && !editorReadonly"
  },
  {
    "key": "alt+[KeyL]",
    "command": "editor.action.indentLines",
    "when": "editorTextFocus && !editorReadonly"
  },
  // navigate back/forward
  {
    "key": "alt+[KeyU]",
    "command": "workbench.action.navigateBack"
  },
  {
    "key": "alt+[KeyN]",
    "command": "workbench.action.navigateBack"
  },
  {
    "key": "alt+[KeyM]",
    "command": "workbench.action.navigateForward"
  },
  {
    "key": "shift+alt+[KeyU]",
    "command": "cursorUndo",
    "when": "textInputFocus"
  },
  {
    "key": "shift+alt+[KeyN]",
    "command": "cursorUndo",
    "when": "textInputFocus"
  },
  {
    "key": "shift+alt+[KeyM]",
    "command": "cursorRedo",
    "when": "textInputFocus"
  },
  // insert Cursor
  {
    "key": "shift+alt+[KeyI]",
    "command": "editor.action.insertCursorAbove",
    "when": "editorTextFocus"
  },
  {
    "key": "shift+alt+[KeyK]",
    "command": "editor.action.insertCursorBelow",
    "when": "editorTextFocus"
  },
  {
    "key": "shift+alt+[Comma]",
    "command": "editor.action.insertCursorBelow",
    "when": "editorTextFocus"
  },
  // moves selected left/right not nesessery; move selected words horizontally (not sure if needed, but looks cool)
  {
    "key": "shift+alt+[KeyJ]",
    "command": "editor.action.moveCarretLeftAction",
    "when": "editorTextFocus && !editorReadonly"
  },
  {
    "key": "shift+alt+[KeyL]",
    "command": "editor.action.moveCarretRightAction",
    "when": "editorTextFocus && !editorReadonly"
  },
  // scroll line/page
  {
    "key": "ctrl+shift+[KeyI]",
    "command": "scrollLineUp",
    "when": "textInputFocus"
  },
  {
    "key": "ctrl+shift+[KeyK]",
    "command": "scrollLineDown",
    "when": "textInputFocus"
  },
  {
    "key": "ctrl+shift+alt+[KeyI]",
    "command": "scrollPageUp",
    "when": "textInputFocus"
  },
  {
    "key": "ctrl+shift+alt+[KeyK]",
    "command": "scrollPageDown",
    "when": "textInputFocus"
  },
  // move through eitors/groups
  {
    "key": "ctrl+shift+[KeyL]",
    "command": "workbench.action.nextEditorInGroup"
    // "command": "workbench.action.nextEditor"
  },
  {
    "key": "ctrl+shift+[KeyJ]",
    "command": "workbench.action.previousEditorInGroup"
    // "command": "workbench.action.previousEditor"
  },
  // suppress "View: Quick Open" with "View: Open"
  {
    "key": "ctrl+tab",
    "command": "workbench.action.nextEditorInGroup",
    "when": "!activeEditorGroupEmpty"
  },
  {
    "key": "ctrl+shift+tab",
    "command": "workbench.action.previousEditorInGroup",
    "when": "!activeEditorGroupEmpty"
  },
  {
    //"key": "ctrl+shift+alt+[KeyL]",
    "key": "ctrl+[KeyL] ctrl+shift+[KeyL]",
    "command": "workbench.action.focusNextGroup"
  },
  {
    //"key": "ctrl+shift+alt+[KeyJ]",
    "key": "ctrl+[KeyJ] ctrl+shift+[KeyJ]",
    "command": "workbench.action.focusPreviousGroup"
    // workbench.action.moveEditorToAboveGroup
  },
  {
    "key": "ctrl+[KeyJ] ctrl+alt+[KeyJ]",
    "command": "workbench.action.moveEditorToPreviousGroup"
  },
  {
    "key": "ctrl+[KeyL] ctrl+alt+[KeyL]",
    "command": "workbench.action.moveEditorToNextGroup"
  },
  // escape -> tilde
  {
    "key": "ctrl+[Escape]",
    "command": "workbench.action.terminal.toggleTerminal",
    "when": "terminal.active"
  },
  {
    "key": "ctrl+[Backquote]",
    "command": "workbench.action.terminal.toggleTerminal",
    "when": "terminal.active"
  },
  {
    "key": "[Backquote]",
    "command": "closeFindWidget",
    "when": "editorFocus && findWidgetVisible && !isComposing"
  },
  {
    "key": "[Backquote]",
    "command": "editor.debug.action.closeExceptionWidget",
    "when": "exceptionWidgetVisible"
  },
  // cope line up/down
  {
    "key": "ctrl+[KeyI] ctrl+shift+[KeyI]",
    "command": "editor.action.copyLinesUpAction",
    "when": "editorTextFocus && !editorReadonly"
  },
  {
    "key": "ctrl+[KeyK] ctrl+shift+[KeyK]",
    "command": "editor.action.copyLinesDownAction",
    "when": "editorTextFocus && !editorReadonly"
  },
  // selectAllSearchEditorMatches"
  {
    "key": "ctrl+shift+f",
    "command": "editor.action.selectHighlights",
    "when": "editorFocus"
  },
  {
    //"key": "ctrl+[KeyK] ctrl+shift+[KeyI]",
    "key": "ctrl+[KeyK] ctrl+shift+[KeyI]",
    "command": "editor.action.formatDocument",
    "when": "editorHasDocumentFormattingProvider && editorTextFocus && !editorReadonly && !inCompositeEditor"
  },
  //tooglePanel
  //{
  //  "key": "ctrl+[KeyJ] ctrl+[KeyJ]",
  //  "command": "workbench.action.togglePanel"
  //},
  {
    "key": "shift+[Space]",
    "command": "editor.action.toggleRenderWhitespace"
  },
  {
    "key": "ctrl+[KeyM]",
    "command": "editor.action.toggleMinimap",
    "when": "editorTextFocus && !editorReadonly"
  },
  {
    // new editor/file
    "key": "ctrl+[KeyD]",
    "command": "workbench.action.files.newUntitledFile"
  },
  {
    "key": "shift+[keyG]",
    "command": "mysql.runQuery",
    "when": "editorLangId == 'sql'"
  },
  {
    "key": "ctrl+[keyG]",
    "command": "mysql.runSQL",
    "when": "editorLangId == 'sql'"
  },
  {
    "key": "ctrl+shift+enter",
    "command": "-mysql.runAllQuery",
    "when": "editorLangId == 'sql'"
  },
  {
    "key": "ctrl+o ctrl+o",
    "command": "workbench.action.files.openFile"
  },
  {
    "key": "[keyG]",
    "command": "acceptSelectedSuggestion",
    "when": "acceptSuggestionOnEnter && suggestWidgetVisible && suggestionMakesTextEdit && textInputFocus"
  },
  // Bind ESC to Backquote
  {
    "key": "[Backquote]",
    "command": "editor.action.cancelSelectionAnchor",
    "when": "editorTextFocus && selectionAnchorSet"
  },
  {
    "key": "[Backquote]",
    "command": "editor.debug.action.closeExceptionWidget",
    "when": "exceptionWidgetVisible"
  },
  {
    "key": "[Backquote]",
    "command": "workbench.action.hideInterfaceOverview",
    "when": "interfaceOverviewVisible"
  },
  {
    "key": "[Backquote]",
    "command": "notebook.cell.quitEdit",
    "when": "inputFocus && notebookEditorFocused && !editorHasMultipleSelections && !editorHasSelection && !editorHoverVisible"
  },
  {
    "key": "[Backquote]",
    "command": "notifications.hideList",
    "when": "notificationCenterVisible"
  },
  {
    "key": "[Backquote]",
    "command": "settings.action.clearSearchResults",
    "when": "inSettingsEditor && inSettingsSearch"
  },
  {
    "key": "[Backquote]",
    "command": "settings.action.focusLevelUp",
    "when": "inSettingsEditor && !inSettingsJSONEditor && !inSettingsSearch"
  },
  {
    "key": "[Backquote]",
    "command": "search.action.focusQueryEditorWidget",
    "when": "inSearchEditor"
  },
  {
    "key": "[Backquote]",
    "command": "search.action.cancel",
    "when": "listFocus && searchViewletVisible && !inputFocus && searchState != '0'"
  },
  {
    "key": "[Backquote]",
    "command": "workbench.action.terminal.clearSelection",
    "when": "terminalFocus && terminalProcessSupported && terminalTextSelected && !terminalFindVisible"
  },
  {
    "key": "[Backquote]",
    "command": "workbench.action.terminal.navigationModeExit",
    "when": "accessibilityModeEnabled && terminalA11yTreeFocus && terminalProcessSupported"
  },
  {
    "key": "[Backquote]",
    "command": "workbench.action.terminal.hideFind",
    "when": "terminalFindVisible && terminalFocus && terminalProcessSupported"
  },
  {
    "key": "[Backquote]",
    "command": "welcome.goBack",
    "when": "inWelcome && activeEditor == 'gettingStartedPage'"
  },
  {
    "key": "[Backquote]",
    "command": "editor.action.inlineSuggest.hide",
    "when": "inlineSuggestionVisible"
  },
  // bind enter to g
  {
    "key": "[keyG]",
    "command": "editor.action.nextMatchFindAction",
    "when": "editorFocus && findInputFocussed"
  },
  {
    "key": "[keyG]",
    "command": "notebook.cell.edit",
    "when": "notebookCellListFocused && notebookEditable && !inputFocus"
  },
  {
    "key": "[keyG]",
    "command": "repl.action.acceptInput",
    "when": "inDebugRepl && textInputFocus"
  },
  {
    "key": "[keyG]",
    "command": "workbench.action.terminal.findPrevious",
    "when": "terminalFindFocused && terminalProcessSupported"
  },
  {
    "key": "[keyG]",
    "command": "acceptRenameInput",
    "when": "editorFocus && renameInputVisible"
  },
  {
    "key": "[keyG]",
    "command": "breadcrumbs.selectFocused",
    "when": "breadcrumbsActive && breadcrumbsVisible"
  },
  {
    "key": "[keyG]",
    "command": "breakpointWidget.action.acceptInput",
    "when": "breakpointWidgetVisible && inBreakpointWidget"
  },
  {
    "key": "[keyG]",
    "command": "editor.action.extensioneditor.findNext",
    "when": "webviewFindWidgetFocused && !editorFocus && activeEditor == 'workbench.editor.extension'"
  },
  {
    "key": "[keyG]",
    "command": "editor.action.replaceOne",
    "when": "editorFocus && findWidgetVisible && replaceInputFocussed"
  },
  {
    "key": "[keyG]",
    "command": "editor.action.webvieweditor.findNext",
    "when": "webviewFindWidgetFocused && !editorFocus && activeEditor == 'WebviewEditor'"
  },
  {
    "key": "[keyG]",
    "command": "explorer.openAndPassFocus",
    "when": "explorerViewletVisible && filesExplorerFocus && !explorerResourceIsFolder && !inputFocus"
  },
  {
    "key": "[keyG]",
    "command": "keybindings.editor.defineKeybinding",
    "when": "inKeybindings && keybindingFocus"
  },
  {
    "key": "[keyG]",
    "command": "list.select",
    "when": "listFocus && !inputFocus"
  },
  {
    "key": "[keyG]",
    "command": "notification.toggle",
    "when": "notificationFocus"
  },
  {
    "key": "[keyG]",
    "command": "problems.action.open",
    "when": "problemFocus"
  },
  {
    "key": "[keyG]",
    "command": "revealReference",
    "when": "listFocus && referenceSearchVisible && !inputFocus"
  },
  {
    "key": "[keyG]",
    "command": "search.action.openResult",
    "when": "fileMatchOrMatchFocus && searchViewletVisible"
  },
  {
    "key": "[keyG]",
    "command": "settings.action.focusSettingControl",
    "when": "settingRowFocus"
  },
  {
    "key": "[keyG]",
    "command": "settings.action.focusSettingsList",
    "when": "inSettingsEditor && settingsTocRowFocus"
  },
  {
    "key": "ctrl+shift+[KeyG]",
    "command": "editor.action.insertLineBefore",
    "when": "editorTextFocus && !editorReadonly"
  },
  // Focus on editors, groups and bars
  // openEditor
  {
    "key": "alt+meta+[keyM]",
    "command": "workbench.action.openEditorAtIndex1"
  },
  {
    "key": "alt+meta+[Comma]",
    "command": "workbench.action.openEditorAtIndex2"
  },
  {
    "key": "alt+meta+[Period]",
    "command": "workbench.action.openEditorAtIndex3"
  },
  {
    "key": "alt+meta+[keyJ]",
    "command": "workbench.action.openEditorAtIndex4"
  },
  {
    "key": "alt+meta+[keyK]",
    "command": "workbench.action.openEditorAtIndex5"
  },
  {
    "key": "alt+meta+[keyL]",
    "command": "workbench.action.openEditorAtIndex6"
  },
  // focusEditorGroup
  {
    "key": "ctrl+meta+[keyM]",
    "command": "workbench.action.focusFirstEditorGroup"
  },
  {
    "key": "ctrl+meta+[Comma]",
    "command": "workbench.action.focusSecondEditorGroup"
  },
  {
    "key": "ctrl+meta+[Period]",
    "command": "workbench.action.focusThirdEditorGroup"
  },
  // focus on bars
  {
    "key": "ctrl+meta+[keyN]",
    "command": "workbench.action.focusSideBar"
  },
  {
    "key": "ctrl+meta+[keyP]",
    "command": "workbench.action.focusActivityBar"
  },
  // toggle bars
  {
    "key": "ctrl+shift+[keyB]",
    "command": "workbench.action.toggleActivityBarVisibility"
  },
  // tab on capslock
  {
    "key": "[CapsLock]",
    "command": "editor.emmet.action.expandAbbreviation",
    "when": "config.emmet.triggerExpansionOnTab && editorTextFocus && !editorReadonly && !editorTabMovesFocus"
  },
  {
    "key": "[CapsLock]",
    "command": "acceptSelectedSuggestion",
    "when": "suggestWidgetVisible && textInputFocus"
  },
  {
    "key": "[CapsLock]",
    "command": "editor.action.inlineSuggest.commit",
    "when": "inlineSuggestionVisible && !editorTabMovesFocus && !inlineSuggestionHasIndentation"
  },
  {
    "key": "[CapsLock]",
    "command": "insertBestCompletion",
    "when": "atEndOfWord && textInputFocus && !hasOtherSuggestions && !inSnippetMode && !suggestWidgetVisible && config.editor.tabCompletion == 'on'"
  },
  {
    "key": "[CapsLock]",
    "command": "insertNextSuggestion",
    "when": "hasOtherSuggestions && textInputFocus && textInputFocus && !inSnippetMode && !suggestWidgetVisible && config.editor.tabCompletion == 'on'"
  },
  {
    "key": "[CapsLock]",
    "command": "insertSnippet",
    "when": "editorTextFocus && hasSnippetCompletions && !editorTabMovesFocus && !inSnippetMode"
  },
  {
    "key": "[CapsLock]",
    "command": "jumpToNextSnippetPlaceholder",
    "when": "editorTextFocus && hasNextTabstop && inSnippetMode"
  },
  { // problem, bo CapsLock ma być tabem, ale keyY jest wtedy capslockiem i tabem; myli [keyY] z [CapsLock]
    "key": "CapsLock",
    "command": "tab",
    "when": "editorTextFocus && !editorReadonly && !editorTabMovesFocus"
  },
  {
    "key": "[CapsLock]",
    "command": "editor.emmet.action.expandAbbreviation",
    "when": "config.emmet.triggerExpansionOnTab && editorTextFocus && !editorReadonly && !editorTabMovesFocus"
  },
  {
    "key": "ctrl+[CapsLock]",
    "command": "workbench.action.nextEditorInGroup"
    // "command": "workbench.action.nextEditor"
    // "command": "workbench.action.openNextRecentlyUsedEditorInGroup"
  },
  {
    "key": "ctrl+shift+[CapsLock]",
    "command": "workbench.action.previousEditorInGroup"
    // "command": "workbench.action.previousEditor"
    // "command": "workbench.action.openPreviousRecentlyUsedEditorInGroup"
  },
  {
    "key": "[CapsLock]",
    "command": "editor.emmet.action.expandAbbreviation",
    "when": "config.emmet.triggerExpansionOnTab && editorTextFocus && !editorReadonly && !editorTabMovesFocus"
  },
  {
    "key": "shift+[CapsLock]",
    "command": "acceptAlternativeSelectedSuggestion",
    "when": "suggestWidgetVisible && textInputFocus && textInputFocus"
  },
  {
    "key": "[CapsLock]",
    "command": "editor.action.inlineSuggest.commit",
    "when": "inlineSuggestionVisible && !editorTabMovesFocus && !inlineSuggestionHasIndentation"
  },
  {
    "key": "[CapsLock]",
    "command": "insertSnippet",
    "when": "editorTextFocus && hasSnippetCompletions && !editorTabMovesFocus && !inSnippetMode"
  },
  {
    "key": "[CapsLock]",
    "command": "jumpToNextSnippetPlaceholder",
    "when": "editorTextFocus && hasNextTabstop && inSnippetMode"
  },
  {
    "key": "shift+[CapsLock]",
    "command": "jumpToPrevSnippetPlaceholder",
    "when": "editorTextFocus && hasPrevTabstop && inSnippetMode"
  },
  // python
  {
    "key": "shift+[keyG]",
    "command": "python.execSelectionInTerminal",
    "when": "editorTextFocus && !findInputFocussed && !jupyter.ownsSelection && !notebookEditorFocused && !replaceInputFocussed && editorLangId == 'python'"
  },
  // select line
  {
    "key": "ctrl+alt+[keyO]",
    "command": "expandLineSelection",
    "when": "textInputFocus"
  },
  {
    "key": "ctrl+k ctrl+f",
    "command": "editor.action.formatSelection",
    "when": "editorHasDocumentSelectionFormattingProvider && editorTextFocus && !editorReadonly"
  },
  {
    "key": "ctrl+[keyG]",
    "command": "r.runSelection",
    "when": "editorTextFocus && editorLangId == 'r'"
  },
  {
    "key": "shift+enter",
    "command": "-jupyter.runcurrentcelladvance",
    "when": "editorTextFocus && isWorkspaceTrusted && jupyter.hascodecells && !editorHasSelection && !notebookEditorFocused"
  },
  {
    "key": "shift+enter",
    "command": "jupyter.runcurrentcell",
    "when": "editorTextFocus && isWorkspaceTrusted && jupyter.hascodecells && !editorHasSelection && !jupyter.havenativecells && !notebookEditorFocused"
  },
  {
    "key": "ctrl+enter",
    "command": "-jupyter.runcurrentcell",
    "when": "editorTextFocus && isWorkspaceTrusted && jupyter.hascodecells && !editorHasSelection && !jupyter.havenativecells && !notebookEditorFocused"
  },
  // move panel
  {
    "key": "ctrl+meta+n",
    "command": "workbench.action.positionPanelLeft"
  },
  {
    "key": "ctrl+meta+o",
    "command": "workbench.action.positionPanelRight"
  },
  {
    "key": "ctrl+meta+e",
    "command": "workbench.action.positionPanelBottom"
  },
  {
    "key": "ctrl+q",
    "command": "-workbench.action.quit"
  },
  {
    "key": "ctrl+shift+q",
    "command": "workbench.action.quit"
  },
  {
    "key": "ctrl+[Semicolon]",
    "command": "workbench.action.focusSideBar"
  },
  {
    "key": "ctrl+shift+escape",
    "command": "workbench.action.toggleMaximizedPanel"
  },

]
/*
    {
      "key": "ctrl+enter",
      "command": "mysql.runQuery",
      "when": "editorLangId == 'sql'"
    },
    ,
    {
      "key": "ctrl+[KeyK] j",
      "command": "-deleteWordStartLeft"
    }
  
  
      // F
      {
        "key": "ctrl+shift+1",
        "command": "workbench.action.showCommands"
      },
      {
        "key": "ctrl+alt+1",
        "command": "workbench.action.showCommands"
      },
      {
        "key": "shift+alt+1",
        "command": "workbench.action.showCommands"
      },
      {
        "key": "ctrl+shift+2",
        "command": "editor.action.rename",
        "when": "editorHasRenameProvider && editorTextFocus && !editorReadonly"
      },
      {
        "key": "ctrl+alt+2",
        "command": "editor.action.rename",
        "when": "editorHasRenameProvider && editorTextFocus && !editorReadonly"
      },
      {
        "key": "shift+alt+2",
        "command": "editor.action.rename",
        "when": "editorHasRen[ameProvider && editorTextFocus && !editorReadonly"
      }
    */
/* arrow + shift in esdf
      {
        "key": "shift+alt+e",
        "command": "cursorColumnSelectUp",
        "when": "editorTextFocus && !editorReadonly"
      },
      {
        "key": "shift+alt+d",
        "command": "cursorColumnSelectDown",
        "when": "editorTextFocus && !editorReadonly"
      }, 
      {
        "key": "shift+alt+a",
        "command": "cursorColumnSelectLeft",
        "when": "editorTextFocus && !editorReadonly"
      }, 
      {
        "key": "shift+alt+f",
        "command": "cursorColumnSelectRight",
        "when": "editorTextFocus && !editorReadonly"
      }
    */
/*
      {
        "key": "`",
        "command": "escape"
      },
      
      {
        "key": "`",
        "command": "type",
        "args": { "text": "Hello World" },
        "when": "editorTextFocus"
      }
  
      // remove some alt lineJumpers
      {
        "key": "alt+down",
        "command": "-lineJumper.moveDown",
        "when": "editorTextFocus"
      },
      {
        "key": "alt+up",
        "command": "-lineJumper.moveUp",
        "when": "editorTextFocus"
      },
      {
        "key": "shift+alt+down",
        "command": "-lineJumper.selectDown",
        "when": "editorTextFocus"
      },
      {
        "key": "shift+alt+up",
        "command": "-lineJumper.selectUp",
        "when": "editorTextFocus"
      },
      {
        "key": "alt+down",
        "command": "-editor.action.moveLinesDownAction",
        "when": "editorTextFocus && !editorReadonly"
      },
      // problemy z tm są bo raz działa raz nie
      {
        "key": "alt+up",
        "command": "-editor.action.moveLinesUpAction",
        "when": "editorTextFocus && !editorReadonly"
      },
      // testing area
      // test ctrl+shift+alt+alt_gr
      // doesnt work
      {
        "key": "ctrl+shift+alt+pageup",
        "command": "-scrollLineUp",
        "when": "textInputFocus"
      },
      {
        "key": "ctrl+shift+alt+pagedown",
        "command": "-scrollLineDown",
        "when": "textInputFocus"
      },
      {
        "key": "ctrl+shift+alt+home",
        "command": "-scrollLineUp",
        "when": "textInputFocus"
      },
      {
        "key": "ctrl+shift+alt+end",
        "command": "-scrollLineDown",
        "when": "textInputFocus"
      },
      // test ctrl+alt+alt_gr
      {
        "key": "ctrl+alt+pageup",
        "command": "-scrollLineUp",
        "when": "textInputFocus"
      },
      {
        "key": "ctrl+alt+pagedown",
        "command": "-scrollLineDown",
        "when": "textInputFocus"
      },
      {
        "key": "ctrl+alt+home",
        "command": "-scrollLineUp",
        "when": "textInputFocus"
      },
      // only one works
      {
        "key": "ctrl+alt+end",
        "command": "-scrollLineDown",
        "when": "textInputFocus"
      },
    
    // unbind to not repeat
    {
      "key": "ctrl+alt+left",
      "command": "-workbench.action.moveEditorToPreviousGroup"
    },
    {
      "key": "ctrl+alt+right",
      "command": "-workbench.action.moveEditorToNextGroup"
    },
  
      // super(meta) (+shift) with arrows to hep (home end page)
  
      {
        "key": "meta+up",
        "command": "cursor",
        "when": "lineJumper.moveUp"
      },
      {
        "key": "meta+down",
        "command": "cursor",
        "when": "lineJumper.moveDown"
      },
      {
        "key": "meta+shift+up",
        "command": "lineJumper.selectUp",
        "when": "textInputFocus"
      },
      {
        "key": "meta+shift+down",
        "command": "lineJumper.selectDown",
        "when": "textInputFocus"
      },
    */